# API Gateway Configuration
# -------------------------

upstream gateway_servers {
    # Dynamic DNS resolution for containerized environments
    server gateway:8000 resolve;
    
    # Keep connections open to backend servers
    keepalive 32;
    
    # Active health checks
    health_check interval=10s fails=3 passes=2 uri=/health;
}

server {
    listen 8000 reuseport;
    server_name _;
    
    # Rate Limiting with Redis
    limit_req_zone $binary_remote_addr zone=auth_limits:10m rate=100r/m;
    limit_req_zone $http_authorization zone=jwt_limits:10m rate=1000r/m;
    
    # JWT Validation (requires ngx_http_auth_jwt_module)
    auth_jwt "API Gateway";
    auth_jwt_key_request /jwks_uri;
    auth_jwt_validation_type COOKIE=access_token;
    
    # CORS Configuration
    add_header 'Access-Control-Allow-Origin' "$http_origin" always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
    add_header 'Access-Control-Expose-Headers' 'X-RateLimit-Limit,X-RateLimit-Remaining' always;

    # Routing Configuration
    location = /jwks_uri {
        internal;
        proxy_pass http://auth-service:8080/.well-known/jwks.json;
        proxy_cache auth_cache;
        proxy_cache_valid 200 1h;
    }

    location /v1/ {
        # Rate Limiting Policies
        limit_req zone=auth_limits burst=20 delay=10;
        limit_req zone=jwt_limits burst=100;
        
        # Request Transformation
        rewrite ^/v1/(.*) /$1 break;
        
        # Proxy Configuration
        proxy_pass http://backend_servers;
        proxy_set_header X-API-Version 1;
        proxy_set_header X-Request-ID $request_id;
        
        # Circuit Breaker
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 1s;
        
        # Cache Control
        proxy_cache api_cache;
        proxy_cache_key "$scheme$request_method$host$request_uri$http_authorization";
        proxy_cache_valid 200 302 10m;
    }

    location /admin/ {
        # IP Whitelisting
        allow 10.0.0.0/8;
        allow 192.168.1.0/24;
        deny all;
        
        # Different authentication method
        auth_jwt "Admin Portal" token=$arg_apiKey;
        auth_jwt_key_file /etc/nginx/conf.d/admin.pub;
        
        proxy_pass http://admin_servers;
    }

    location /status {
        # Health check endpoint
        access_log off;
        stub_status;
    }

    # Error Handling
    error_page 401 @401;
    location @401 {
        return 401 '{"error": "unauthorized", "message": "Valid JWT required"}';
    }

    error_page 429 @429;
    location @429 {
        return 429 '{"error": "rate_limit_exceeded", "message": "Too many requests"}';
    }
}

# Cache Zones
proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m inactive=60m;
proxy_cache_path /var/cache/nginx/auth levels=1:2 keys_zone=auth_cache:5m inactive=10m;

# Rate Limit Zones
limit_req_zone $binary_remote_addr zone=global_limit:10m rate=1000r/s;
limit_req_zone $http_x_api_key zone=api_key_limit:10m rate=100r/s;