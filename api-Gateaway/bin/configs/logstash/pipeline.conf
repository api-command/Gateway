# logstash/pipeline.conf
input {
  beats {
    port => 5044
    ssl => false
    codec => json
  }

  # For direct TCP log input from services
  tcp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Parse JSON formatted logs
  if [message] =~ /^{.*}$/ {
    json {
      source => "message"
      target => "gateway_log"
    }
  } else {
    # Fallback to grok pattern for text logs
    grok {
      match => { 
        "message" => [
          "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:log_level}\] %{DATA:request_id} %{DATA:method} %{URIPATH:path} %{NUMBER:status} %{NUMBER:duration}ms",
          "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:log_level}\] %{GREEDYDATA:message}"
        ]
      }
    }
  }

  # Parse JWT claims from headers
  if [headers] and [headers][authorization] {
    grok {
      match => { 
        "[headers][authorization]" => "^Bearer %{JWT:jwt}$" 
      }
    }
    
    jwt {
      header_field => "jwt"
      secret => "your-jwt-secret"
      target => "jwt_payload"
    }
  }

  # GeoIP for client addresses
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
      database => "/usr/share/logstash/GeoLite2-City.mmdb"
    }
  }

  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }

  # Cleanup fields
  mutate {
    remove_field => [
      "message",
      "headers",
      "jwt",
      "timestamp"
    ]
    
    rename => {
      "gateway_log" => "[event][original]"
    }
  }

  # Add error classification
  if [log_level] == "ERROR" or [status] >= 500 {
    mutate {
      add_tag => ["error"]
    }
  }

  # Rate limit specific processing
  if [event][original][rate_limit] {
    metrics {
      meter => "rate_limit_events"
      add_tag => "rate_limit_metrics"
    }
  }
}

output {
  # Main Elasticsearch output
  elasticsearch {
    hosts => ["${ES_HOSTS:elasticsearch:9200}"]
    user => "${ES_USER:logstash_user}"
    password => "${ES_PASSWORD:changeme}"
    index => "api-gateway-%{+YYYY.MM.dd}"
    document_type => "_doc"
    template => "/usr/share/logstash/templates/api-gateway-template.json"
    template_name => "api-gateway"
    template_overwrite => true
  }

  # Error logs to separate index
  if "error" in [tags] {
    elasticsearch {
      hosts => ["${ES_HOSTS:elasticsearch:9200}"]
      index => "api-gateway-errors-%{+YYYY.MM.dd}"
    }
  }

  # Console output for debugging
  if [@metadata][pipeline_debug] == "true" {
    stdout {
      codec => rubydebug
    }
  }
}