# Main NGINX Configuration for API Gateway
# ----------------------------------------

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    multi_accept        on;
    use                 epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log Format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'rt=$request_time uct="$upstream_connect_time" '
                      'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log  /var/log/nginx/access.log  main buffer=16k flush=5s;

    # Basic Settings
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;
    server_tokens       off;

    # Timeouts
    client_body_timeout             10s;
    client_header_timeout           10s;
    send_timeout                    10s;
    proxy_connect_timeout           5s;
    proxy_send_timeout              15s;
    proxy_read_timeout              15s;

    # Buffer Sizes
    client_body_buffer_size         16k;
    client_header_buffer_size       4k;
    client_max_body_size            8m;
    large_client_header_buffers     4 8k;

    # Gzip Compression
    gzip                on;
    gzip_comp_level     5;
    gzip_min_length     256;
    gzip_proxied        any;
    gzip_vary           on;
    gzip_types
        application/javascript
        application/json
        application/xml
        text/css
        text/plain
        text/xml;

    # SSL Optimization
    ssl_protocols               TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers   on;
    ssl_ciphers                'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_session_cache          shared:SSL:10m;
    ssl_session_timeout        10m;
    ssl_session_tickets        off;
    ssl_stapling               on;
    ssl_stapling_verify        on;

    # Rate Limiting at LB Level
    limit_req_zone $binary_remote_addr zone=global:10m rate=1000r/s;
    limit_req zone=global burst=200 nodelay;

    # Upstream for API Gateway Instances
    upstream api_gateway {
        # Consistent Hashing for Session Persistence
        hash $request_uri consistent;
        
        # Zone for active health checks
        zone api_gateway 64k;
        
        # Gateway instances
        server gateway1:8000 max_fails=3 fail_timeout=30s;
        server gateway2:8000 max_fails=3 fail_timeout=30s;
        server gateway3:8000 max_fails=3 fail_timeout=30s backup;
        
        # Load Balancing Method
        least_conn;
    }

    # Health Check Server
    server {
        listen 8080;
        location /health {
            access_log off;
            return 200 "OK";
        }
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }

    # Main API Gateway Server
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        
        # Redirect HTTP to HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        
        server_name api.example.com;
        
        # SSL Certificates
        ssl_certificate         /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key     /etc/nginx/ssl/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/chain.pem;
        
        # Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Proxy Headers
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID      $request_id;
        
        # WebSocket Support
        proxy_http_version 1.1;
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Cache Settings
        proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m inactive=60m use_temp_path=off;
        
        # Static Content
        location /static/ {
            root /var/www;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }
        
        # API Routes
        location / {
            # Global Rate Limiting
            limit_req zone=global burst=200 nodelay;
            
            # Circuit Breaker
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_timeout 2s;
            proxy_next_upstream_tries 2;
            
            # Proxy to Gateway Cluster
            proxy_pass http://api_gateway;
            
            # Cache Control
            proxy_cache api_cache;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_valid 200 302 10m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 16k;
            proxy_buffers 4 32k;
            proxy_busy_buffers_size 64k;
            proxy_temp_file_write_size 64k;
        }
        
        # Admin Routes
        location /admin/ {
            # IP Whitelist
            allow 10.0.0.0/8;
            allow 192.168.1.0/24;
            deny all;
            
            proxy_pass http://api_gateway;
        }
        
        # Error Pages
        error_page 429 /429.json;
        location = /429.json {
            internal;
            default_type application/json;
            return 429 '{"error": "rate_limit_exceeded", "message": "Too many requests"}';
        }
        
        error_page 502 503 504 /5xx.json;
        location = /5xx.json {
            internal;
            default_type application/json;
            return 503 '{"error": "service_unavailable", "message": "Service temporarily unavailable"}';
        }
    }
}